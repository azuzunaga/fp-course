{inputs}:
with import ./lib.nix;
  self: super: let
    # IMPORTANT
    #
    # If you add a new override to this section, leave a detailed reason why we need this override.
    # This is important because when we later upgrade nixpkgs, we need to know if we still need that specific version, or can ugprade.
    # This overlay patches Cabal 3.6.2.0 and also modifies callHackage to keep the
    # hacakage derivation as part of the resulting derivations' passthru.
    overlay-cabal = hself: hsuper:
      with self.haskell.lib; {
        # normal callHackage keeps the deriver ; we donâ€™t want that
        callHackage = name: version: args: let
          src = hself.hackage2nix name version;
        in
          overrideCabal (hself.callPackage src args) (orig: {
            passthru =
              orig.passthru
              or {}
              // {
                # When using callCabal2nix or callHackage, it is often useful
                # to debug a failure by inspecting the Nix expression
                # generated by cabal2nix. This can be accessed via this
                # cabal2nixDeriver field.
                cabal2nixDeriver = src;
              };
          });

        # FIXME are these patches still needed?
        # patch Cabal for good measure, such that packages that depend on
        # lib:Cabal will benefit from this as well, not just those that
        # link against the one shipped with ghc.
        Cabal_3_6_3_0 = hsuper.Cabal_3_6_3_0.overrideDerivation (drv: {
          patches =
            (drv.patches or [])
            ++ self.lib.optionals self.stdenv.hostPlatform.isDarwin [
              ../patches/cabal/0001-Disable-RPath-usage-on-macOS.patch
              ../patches/cabal/0001-Make-GHC-targetDir-commands-relative-to-current-dire.patch
            ];
        });

        # Cabal 3.6.3.0 is currently the latest Cabal in our nixpkgs. We're just
        # ensuring that cabal-install uses it, but this may not be necessary.
        cabal-install = hsuper.cabal-install.overrideScope (hself': super': {Cabal = hself'.Cabal_3_6_3_0;});
      };

    # Package overlay for a build on GHC 9.2.4
    overlay-ghc924 = hself: hsuper:
      with self.haskell.lib; {
        ### Hackage Dependencies ###
        #
        # These dependencies are pulled from Hackage and are newer than what is
        # pinned in nixpkgs. When updating nixpkgs, we should check these and ensure
        # that we're not getting a newer variant from nix.

        # dontCheck: wants to have `npm` or `yarn` to install a typescript compiler
        # doJailbreak: has unreleased dependency updates
        # unmarkBroken: it's marked broken in nixpkgs because of the npm/yarn thing
        # Note: newer version are available but they appear to break our usage of
        # generics in Handler.Security.Types.SecurityDetails.
        aeson-typescript = doJailbreak (unmarkBroken (dontCheck (hself.callHackage "aeson-typescript" "0.4.0.0" {})));

        annotated-exception = hself.callHackage "annotated-exception" "0.2.0.4" {};

        currency-codes = unmarkBroken hsuper.currency-codes;

        data-default = hself.callHackage "data-default" "0.7.1.1" {};

        # Skip tests, since the old version of this relies on hspec < 2.8
        email-validate = dontCheck hsuper.email-validate;

        # Add fakepull, which is a dependency of slack-web (too new to be in our nixpkgs)
        fakepull = hself.callHackage "fakepull" "0.3.0.2" {};

        # Updated version; the version in nixpkgs is marked as broken
        # We also need to pass in the C library, and dontCheck avoids an undefined symbol error.
        # It appears to work fine in practice
        # Note: We are only using this for a tiny thing. If this causes issues in the future, we could scrap it.
        geos = dontCheck (hself.callPackage ../deps/geos.nix {geos_c = super.geos;});

        xmlbf = hself.callHackage "xmlbf" "0.6.1" {};
        xmlbf-xeno = hself.callHackage "xmlbf-xeno" "0.2" {};

        yesod-form = hself.callHackage "yesod-form" "1.7.0" {};

        yesod-newsfeed = hself.callHackage "yesod-newsfeed" "1.7.0.0" {};

        yesod-persistent = hself.callHackage "yesod-persistent" "1.6.0.8" {};

        yesod-static = hself.callHackage "yesod-static" "1.6.1.0" {};

        yesod-test = dontCheck (hself.callHackage "yesod-test" "1.6.12" {});
        # default needs a higher upper bound on `primitive`; this is fixed in newer versions
        quickcheck-classes-base = hself.callHackage "quickcheck-classes-base" "0.6.2.0" {};
        quickcheck-classes = hself.callHackage "quickcheck-classes" "0.6.5.0" {};

        # default needs higher upper bound on `containers`
        semirings = hself.callHackage "semirings" "0.6" {};

        persistent-template = hself.callHackage "persistent-template" "2.12.0.0" {};

        persistent-iproute = hself.callHackage "persistent-iproute" "0.2.5" {};

        # marked as dontCheck because the test suite requires a specific postgres
        # setup
        persistent-postgresql = dontCheck (hself.callHackage "persistent-postgresql" "2.13.5.0" {});

        # persistent-postgis is not on hackage. This is a branch owned by github
        # MaxGabriel which relaxes version bounds and has CPP compatibility with
        # different persistent versions.
        persistent-postgis = doJailbreak (hself.callPackage ../deps/persistent-postgis.nix {});

        # Default nixpkgs versions of these are older / marked as broken.
        persistent-qq = hself.callHackage "persistent-qq" "2.12.0.3" {};
        persistent-discover = hself.callHackage "persistent-discover" "0.1.0.6" {};
        persistent-documentation = hself.callHackage "persistent-documentation" "0.1.0.4" {};

        memory = hself.callHackage "memory" "0.18.0" {};

        # hsemail is used for date parsing. 2.2.1 fixes a bug where the 31st of the month isn't accepted
        hsemail = atLeast hself hsuper "hsemail" "2.2.1" {};

        hedgehog = hself.callHackage "hedgehog" "1.2" {};
        hedgehog-quickcheck = hself.callHackage "hedgehog-quickcheck" "0.1.1" {};
        # The following dependencies have `tasty-hedgehog` in their test suites
        # which doesn't support `hedgehog-1.2`
        # TODO: remove these calls when `tasty-hedgehog` is supported
        hedgehog-fn = doJailbreak hsuper.hedgehog-fn;
        nonempty-containers = dontCheck hsuper.nonempty-containers;
        retry = dontCheck hsuper.retry;
        uri-bytestring = dontCheck hsuper.uri-bytestring;

        # We want at least version 2.9.4 for extra features (current nixpkgs at time of
        # writing gives 2.7.10)
        #
        # Test failed on 2.8.0
        # test/Test/Hspec/Core/Example/LocationSpec.hs:42:29
        # Randomized with seed 1985544281
        # --match "/Test.Hspec.Core.Example.Location/extractLocation/with pattern match failure in do expression/in IO/extracts Location/"
        #
        # dontCheck is used because without it, there's infinite recursion... probably
        # because hspec's test suite uses hspec.
        #
        # Note: Matt Parsons tried doing these with callHackage, but got infinite
        # loops from cabal2nix having a dependency on hspec. Having the derivations
        # in deps/ avoids this.
        hspec-core = dontCheck (hself.callPackage ../deps/hspec-core-2.9.4.nix {});
        hspec-discover = dontCheck (hself.callPackage ../deps/hspec-discover-2.9.4.nix {});
        hspec = dontCheck (hself.callPackage ../deps/hspec-2.9.4.nix {});
        hspec-golden = hself.callHackage "hspec-golden" "0.2.0.0" {};

        # The recent changes fix the orphan intances that break our build.
        # 0.10 is released, but has some breaking changes.
        jose = dontCheck (hself.callPackage ../deps/jose.nix {});

        # rrule 0.1.1 is marked as broken in nixpkgs, and even 0.1.2 on hackage
        # has too low an hspec bound. Jailbreak it and it works fine.
        rrule = doJailbreak (hself.callHackage "rrule" "0.1.1" {});

        # 0.2.1.0 is marked deprecated on hackage so we use the next non-deprecated
        # version.
        conduit-parse = atLeast hself hsuper "conduit-parse" "0.2.1.1" {};

        # We have to set libssh2 manually here because if we did not, then callPackage
        # would substitute libssh2 itself, resulting in a loop.
        libssh2 = hself.callHackage "libssh2" "0.2.0.9" {libssh2 = super.libssh2;};

        # C FFI helper functions for authenticating with Apex's EDocuments API
        # apex-edocs-auth is a package written by @ldub to implement apex's old auth scheme.
        # Apex's auth scheme requires AES256 with a 256 bit block size, which is non-standard and
        # can't be done with haskell's cryptonite.
        # apex-edocs-auth calls out to mcrypt, a c library, to achieve that.
        # the repo is here and it has its master branch protected: https://github.com/MercuryTechnologies/apex-edocs-auth
        apex-edocs-auth = hself.callPackage ../deps/apex-edocs-auth.nix {mcrypt = super.libmcrypt;};

        # Use a version of haskell-src-exts that supports BlockArguments for use in hlint
        # We have to use the `callPackage` format here because trying to use
        # `callHackage` results in infinite recursion at undefined location error.
        haskell-src-exts = hself.callPackage ../deps/haskell-src-exts.nix {};

        # Generates IOS/Android types.
        moat = hself.callCabal2nix "moat" (self.fetchFromGitHub {
          owner = "MercuryTechnologies";
          repo = "moat";
          rev = "8dcd9d0b7e30b69bf8f190c2503f0c93d32dddc5";
          sha256 = "sha256-iGDnzkWSXfWWHJioo6boorNyt4M7HhNFsKROfgWGiwA=";
          fetchSubmodules = true;
        }) {};

        prometheus-client = hself.callHackage "prometheus-client" "1.1.0" {};

        text-metrics = atLeast hself hsuper "text-metrics" "0.3.1" {};

        # Interact with gpg agent, requires gpg-agent to run tests so dontCheck
        # https://github.com/rethab/h-gpgme/pull/54
        # Merged, but no release yet...
        #
        # Also has this massive perf bug fix https://github.com/rethab/h-gpgme/pull/61
        h-gpgme = dontCheck (hself.callCabal2nix "h-gpgme" (self.fetchFromGitHub {
          owner = "avieth";
          repo = "h-gpgme";
          rev = "9ac2db20c680858c5ddf51de8bd3fbb05d63be22";
          sha256 = "Kll7YGkbTWHjmKsSj02PW5z6gpSAVDZIU+40BXSvpwY=";
          fetchSubmodules = true;
        }) {});

        hs-opentelemetry-api = hself.callHackage "hs-opentelemetry-api" "0.0.3.6" {};
        hs-opentelemetry-sdk = hself.callHackage "hs-opentelemetry-sdk" "0.0.3.3" {};
        hs-opentelemetry-instrumentation-wai = hself.callHackage "hs-opentelemetry-instrumentation-wai" "0.0.1.3" {};
        hs-opentelemetry-instrumentation-http-client = hself.callHackage "hs-opentelemetry-instrumentation-http-client" "0.0.2.0" {};
        hs-opentelemetry-instrumentation-hspec = hself.callHackage "hs-opentelemetry-instrumentation-hspec" "0.0.1.0" {};
        hs-opentelemetry-propagator-w3c = hself.callHackage "hs-opentelemetry-propagator-w3c" "0.0.1.2" {};
        hs-opentelemetry-exporter-otlp = hself.callHackage "hs-opentelemetry-exporter-otlp" "0.0.1.3" {};
        hs-opentelemetry-instrumentation-yesod = hself.callHackage "hs-opentelemetry-instrumentation-yesod" "0.0.1.3" {};

        # tests donâ€™t work on aarch64-darwin; https://github.com/fpco/unliftio/issues/87
        unliftio =
          if (self.stdenv.hostPlatform.isDarwin && self.stdenv.hostPlatform.isAarch64)
          then dontCheck hsuper.unliftio
          else hsuper.unliftio;
        amazonka-ec2 =
          if (self.stdenv.hostPlatform.isDarwin && self.stdenv.hostPlatform.isAarch64)
          then dontCheck hsuper.amazonka-ec2
          else hsuper.amazonka-ec2;

        terminal-size = hself.callHackage "terminal-size" "0.3.3" {};

        # bounds on jose < 0.10
        webauthn = doJailbreak (hself.callHackage "webauthn" "0.4.1.2" {});

        # Pin newer dependency for webauthn. After the pinned nixpkgs is updated and
        # the package is >=1.6.12, this override can be removed.
        x509-validation = atLeast hself hsuper "x509-validation" "1.6.12" {};

        # Is not on hackage. Don't check until x9-serialization upgrades hspec-golden.
        x9-serialization = dontCheck (hself.callPackage ../deps/x9.nix {});

        # Want aeson >= 2 because it doesn't use a hash map (security vulnerability).
        aeson = hself.callHackage "aeson" "2.0.3.0" {};

        # Minimum version bounds for aeson 2.
        text-short = hself.callHackage "text-short" "0.1.5" {};
        semialign = hself.callHackage "semialign" "1.2.0.1" {};
        attoparsec = hself.callHackage "attoparsec" "0.14.4" {};

        unordered-containers = hself.callHackage "unordered-containers" "0.2.15.0" {};

        quickcheck-instances = hself.callHackage "quickcheck-instances" "0.3.26.1" {};

        # aeson bound for 2.
        aeson-iproute = hself.callHackage "aeson-iproute" "0.3.0" {};

        chronos = hself.callHackage "chronos" "1.1.4" {};

        # 0.6.1 is marked as broken
        contiguous = atLeast hself hsuper "contiguous" "0.6.1.1" {};

        # Various version bounds including aeson 2.
        postgresql-simple = hself.callHackage "postgresql-simple" "0.6.4" {};

        # hashable bound
        rebase = atLeast hself hsuper "rebase" "1.15.0.3" {};
        # Needed because of rebase
        rerebase = atLeast hself hsuper "rerebase" "1.15.0.3" {};
        # Needed for rebase (at least 0.5)
        selective = atLeast hself hsuper "selective" "0.5" {};

        # aeson 2 support
        jose-jwt = hself.callHackage "jose-jwt" "0.9.4" {};

        lucid = hself.callHackage "lucid" "2.11.0" {};

        # https://github.com/nikita-volkov/refined/pull/86
        # this was merged, just need to wait for >0.7  to have a release
        refined = hself.callCabal2nix "refined" (self.fetchFromGitHub {
          owner = "nikita-volkov";
          repo = "refined";
          rev = "eced2bb0991bde971646e4b3d291870d0aab83a3";
          sha256 = "sha256-QvZSFeAmgdBwdyneGRKMCMNGnP+8rD/uTED0icQB+4s=";
          fetchSubmodules = true;
        }) {};

        these-skinny = atLeast hself hsuper "these-skinny" "0.7.5" {};

        # aeson >= 2
        http2 = atLeast hself hsuper "http2" "3.0.3" {};

        # aeson >= 2
        shakespeare = atLeast hself hsuper "shakespeare" "2.0.25.1" {};

        # aeson >= 2
        # PR to mainline is https://github.com/ua-parser/uap-haskell/pull/15
        ua-parser = hself.callCabal2nix "ua-parser" (self.fetchFromGitHub {
          owner = "avieth";
          repo = "uap-haskell";
          rev = "b3b960ef228d5fb2ea8fc50131eae81e9d2c81cd";
          sha256 = "HB5CrY6Lk8RE2nKWQFGB9UONcvNuJTj1Mo36gBKJGyo=";
          fetchSubmodules = true;
        }) {};

        ory-hydra-client = hself.callHackage "ory-hydra-client" "1.10.1" {};

        # aeson >= 2
        bugsnag-haskell = atLeast hself hsuper "bugsnag-haskell" "0.0.4.4" {};

        # Must be less than 1.0 (https://gitlab.haskell.org/ghc/ghc/-/issues/20908#note_401183)
        # but we need to relax the bounds, so we just jailbreak it.
        primitive-unlifted = doJailbreak (hself.callHackage "primitive-unlifted" "0.1.3.1" {});
        primitive-checked = hself.callHackage "primitive-checked" "0.7.3.0" {};

        # https://github.com/andrewthad/country/pull/29
        country = hself.callCabal2nix "country" ((self.fetchFromGitHub {
            owner = "mercurytechnologies";
            repo = "country";
            rev = "d5134c5b22ca8eba77d2e67fc065bb2609c30803";
            sha256 = "sha256-a7zQWbQYwGuLOuq79xMPEJeVErJuOS0CiaAaoT4/hbU=";
            fetchSubmodules = true;
          })
          + /country) {};

        # Need 0.19 for aeson 2 support
        servant = hself.callCabal2nix "servant" (self.fetchFromGitHub {
            owner = "TeofilC";
            repo = "servant";
            rev = "a53d69929cf6fe531bb25aec65e7ab6405278459";
            sha256 = "sha256-y6fySO8NqtEad+W+F48QJgRR0JYfqXwo/+MCxcrpJpg=";
          }
          + /servant) {};
        servant-client-core = hself.callCabal2nix "servant-client-core" (self.fetchFromGitHub {
            owner = "TeofilC";
            repo = "servant";
            rev = "a53d69929cf6fe531bb25aec65e7ab6405278459";
            sha256 = "sha256-y6fySO8NqtEad+W+F48QJgRR0JYfqXwo/+MCxcrpJpg=";
          }
          + /servant-client-core) {};
        servant-server = hself.callCabal2nix "servant-server" (self.fetchFromGitHub {
            owner = "TeofilC";
            repo = "servant";
            rev = "a53d69929cf6fe531bb25aec65e7ab6405278459";
            sha256 = "sha256-y6fySO8NqtEad+W+F48QJgRR0JYfqXwo/+MCxcrpJpg=";
          }
          + /servant-server) {};
        servant-client = hself.callCabal2nix "servant-client" (self.fetchFromGitHub {
            owner = "TeofilC";
            repo = "servant";
            rev = "a53d69929cf6fe531bb25aec65e7ab6405278459";
            sha256 = "sha256-y6fySO8NqtEad+W+F48QJgRR0JYfqXwo/+MCxcrpJpg=";
          }
          + /servant-client) {};

        shh = hself.callHackage "shh" "0.7.2.0";

        # Need an hoauth2 that supports aeson >= 2 and bytestring >= 0.11. That came
        # in 2.4.0.
        hoauth2 = hself.callHackage "hoauth2" "2.4.0" {};

        # Update for blocks support ported from mwb. Not yet on hackage.
        slack-web = hself.callCabal2nix "slack-web" (self.fetchFromGitHub {
          owner = "MercuryTechnologies";
          repo = "slack-web";
          # https://github.com/mercurytechnologies/slack-web/tree/master
          rev = "21741b958474d7221edd9ebd00c1213b454bdaa5";
          sha256 = "sha256-IlrXPwei7szzBvf7gmHoJSRA4SAoxEAFNXloNpjiKNc=";
        }) {};

        # Amazonka and amazonka core updated to use bytestring >=11 and aeson >=2
        # The other amazonka stuff that we use does not need to change.
        amazonka = doJailbreak (hself.callPackage ../deps/amazonka-1.6.1.1.nix {});
        amazonka-core = doJailbreak (hself.callPackage ../deps/amazonka-core-1.6.1.1.nix {});

        # template-haskell, aeson bounds demand newer persistent.
        persistent = hself.callHackage "persistent" "2.14.1.0" {};
        persistent-test = hself.callHackage "persistent-test" "2.13.1.3" {};
        # Must set sqlite because there is a hackage package of the same name.
        persistent-sqlite = hself.callHackage "persistent-sqlite" "2.13.1.0" {sqlite = super.sqlite;};
        persistent-typed-db = hself.callHackage "persistent-typed-db" "0.1.0.7" {};

        # new aeson version
        yesod = hself.callHackage "yesod" "1.6.2.1" {};

        yesod-core = hself.callHackage "yesod-core" "1.6.23.1" {};

        # Latest release allows for aeson >= 1.6
        hoogle = atLeast hself hsuper "hoogle" "5.0.18.3" {};

        # template-hakell bound / support
        th-compat = hself.callHackage "th-compat" "0.1.3" {};

        # reason?
        cabal-doctest = atLeast hself hsuper "cabal-doctest" "1.0.9" {};

        # bytestring bound is too strict <0.11.
        iconv = doJailbreak hsuper.iconv;

        # Merge of PR called "Add FlexibleContexts to support GHC 9.2"
        # Also need the fix for https://github.com/typeable/generic-arbitrary/issues/14
        # These are in 0.2.2
        generic-arbitrary = hself.callHackage "generic-arbitrary" "0.2.2" {};

        # Support for 9.2
        hie-compat = atLeast hself hsuper "hie-compat" "0.3.0.0" {};

        # base upper bound
        lens-family = atLeast hself hsuper "lens-family" "2.1.1" {};

        # Induced by lens-family-2.1.1
        lens-family-core = atLeast hself hsuper "lens-family-core" "2.1.0" {};

        # merge of "Allow base-4.16"
        postgresql-libpq = hself.callHackage "postgresql-libpq" "0.9.4.3" {};

        # base upper bound
        sop-core = atLeast hself hsuper "sop-core" "0.5.0.2" {};

        typerep-map = dontCheck (hself.callCabal2nix "typerep-map" (self.fetchFromGitHub {
          owner = "parsonsmatt";
          repo = "typerep-map";
          rev = "75b7cd5d45986be07420a6821d352ad2adc0b697";
          sha256 = "sha256-3ATQgkB0dIyA3q/VzsTUk9KwVtmNudu7u3WeqXIWbgg=";
        }) {});

        # template-haskell upper bound
        deriving-compat = atLeast hself hsuper "deriving-compat" "0.6" {};

        # GHC 9.4 support
        # on master, not released yet
        proto-lens = hself.callPackage ../deps/proto-lens.nix {};
        proto-lens-runtime = hself.callPackage ../deps/proto-lens-runtime.nix {};

        # test-suite chell dependency bounds not satisfied
        # But also, system-fileio is deprecated in favour of directory, so we should
        # see if we can make it not needed FIXME
        system-fileio = dontCheck hsuper.system-fileio;

        # base bound
        modern-uri = atLeast hself hsuper "modern-uri" "0.3.4.3" {};

        # base bound
        versions = atLeast hself hsuper "versions" "5.0.2" {};

        # utf8-light is a dependency of the test suite, but it doesn't build on GHC 9
        # and the repository in its cabal file is 404 on github.
        language-javascript = dontCheck hsuper.language-javascript;

        # Bytestring pinned to 0.10
        hjsmin = doJailbreak hsuper.hjsmin;

        extra = hself.callHackage "extra" "1.7.11" {};

        # 0.4.1.0 is required by HLS.
        # dontCheck because all of the tests which try to run hiedb fail, probably
        # because they're run by nix.
        hiedb = dontCheck (hself.callHackage "hiedb" "0.4.2.0" {});

        # base bound
        text-show = atLeast hself hsuper "text-show" "3.9.6" {};

        # Includes the "add 9.2.1 support" commit.
        base64 = hself.callHackage "base64" "0.4.2.4" {};

        bsb-http-chunked = dontCheck (hself.callHackage "bsb-http-chunked" "0.0.0.4" {});

        HaskellNet = hself.callPackage ../deps/HaskellNet.nix {};

        # Because of jose
        base64-bytestring = atLeast hself hsuper "base64-bytestring" "1.2.1.0" {};

        # The Hackage version has a broken test suite caused by missing FlexibleContexts
        # We use dontCheck here to avoid building the tests
        mutable-containers = dontCheck hsuper.mutable-containers;

        # bytestring bound
        tzdata = atLeast hself hsuper "tzdata" "0.2.20211021.0" {};

        # Tests are failing on Mac only https://github.com/nilcons/haskell-tz/issues/28
        tz = dontCheck (hself.callPackage ../deps/tz-0.1.3.6.nix {});

        # See comment in `src/A/MercuryPrelude/Yesod/Common.hs`; we're also importing the following subdependencies explitly:
        # * data-default
        # * yesod-form
        # * yesod-newsfeed
        # * yesod-static
        # * classy-prelude-conduit
        # time bound
        classy-prelude = atLeast hself hsuper "classy-prelude" "1.5.0.2" {};

        classy-prelude-conduit = atLeast hself hsuper "classy-prelude-conduit" "1.5.0" {};

        xeno = atLeast hself hsuper "xeno" "0.6" {};

        # Compile failure with 3.3.17
        # FIXME test suite shells out to curl; would need to edit the nix to make
        # that work. Use testDepends or testSystemDepends ? overrideAttrs
        warp = dontCheck (atLeast hself hsuper "warp" "3.3.19" {});

        # Latest hackage won't build on GHC 9.x
        http2-client = hself.callCabal2nix "http2-client" (self.fetchFromGitHub {
          owner = "lucasdicioccio";
          repo = "http2-client";
          rev = "046b1f23ea547b75f1a3dc3d878603968bff4fb4";
          sha256 = "8p1fcfP7zYNi6WLyoc6O/dIufOL8+p6U8fKcbcNWBM8=";
          fetchSubmodules = true;
        }) {};

        # 0.3.0.1 won't build
        # Requires changes to work with latest http2-client
        # https://github.com/memrange/push-notify-apn/pull/16
        push-notify-apn = hself.callCabal2nix "push-notify-apn" (self.fetchFromGitHub {
          owner = "avieth";
          repo = "push-notify-apn";
          rev = "13e46b917a583915372ec5728fe1df99fe263726";
          sha256 = "5g7bHJU0RZRsa9jlK17jw/ci0tae8u8ks8FYz1nOfMM=";
          fetchSubmodules = true;
        }) {};

        # bytestring 11 bound
        byteslice = atLeast hself hsuper "byteslice" "0.2.7.0" {};

        # Has not been updated since 2020. Bytestring bound upped
        bytehash = dontCheck (hself.callCabal2nix "bytehash" (self.fetchFromGitHub {
          owner = "avieth";
          repo = "bytehash";
          rev = "81bb61fe278be3d898bb353a92ee79305f8daa6a";
          sha256 = "D99V03lb3XlK8yOAPkrJkurob4UgvIPHL+uywPmMYj4=";
          fetchSubmodules = true;
        }) {});

        # https://github.com/erikd/wide-word/pull/69
        wide-word = dontCheck (hself.callCabal2nix "wide-word" (self.fetchFromGitHub {
          owner = "parsonsmatt";
          repo = "wide-word";
          rev = "4189a6419287c4249f1d6772889065f0908e4630";
          sha256 = "sha256-XNhGjzAXeNHEQtwAbAHFhSe1U0bsF4iO8FCbNPPZz6E=";
        }) {});

        # https://github.com/byteverse/bytebuild/pull/29
        bytebuild = hself.callCabal2nix "bytebuild" (self.fetchFromGitHub {
          owner = "parsonsmatt";
          repo = "bytebuild";
          rev = "f65821b505233a98e74786d7c7ec66aabae50a61";
          sha256 = "sha256-DbXe+z51P0Sc6jdPeWeYTQwmAXPjflG1OZJsW6ZQaXE=";
        }) {};

        # Needed by bytebuild
        zigzag = hself.callHackage "zigzag" "0.0.1.0" {};

        # https://github.com/byteverse/bytesmith/pull/27
        bytesmith = hself.callCabal2nix "bytesmith" (self.fetchFromGitHub {
          owner = "parsonsmatt";
          repo = "bytesmith";
          rev = "cfe3b620058cf1b68097b3a73834cd59f4085eda";
          sha256 = "sha256-Y2HxENX3hy0/qsUNwhWhgLttVSKnLwtLaoIvrMhe2E0=";
        }) {};

        # the test suite tries to connect to a mysql instance but fails
        # because there is none...
        esqueleto = dontCheck (hself.callHackage "esqueleto" "3.5.8.1" {});

        graphula = hself.callHackage "graphula" "2.0.2.1" {};

        # FIXME why does it fail?
        cryptostore = dontCheck hsuper.cryptostore;

        generic-lens-core = atLeast hself hsuper "generic-lens-core" "2.2.1.0" {};
        generic-lens = atLeast hself hsuper "generic-lens" "2.2.1.0" {};
        unicode-transforms = atLeast hself hsuper "unicode-transforms" "0.4.0.1" {};
        unicode-data = atLeast hself hsuper "unicode-data" "0.3.0" {};
        deriving-aeson = atLeast hself hsuper "deriving-aeson" "0.2.8" {};
        singletons = atLeast hself hsuper "singletons" "3.0.1" {};

        basement = atLeast hself hsuper "basement" "0.0.14" {};
        foundation = atLeast hself hsuper "foundation" "0.0.28" {};

        # Need an HLint build which uses ghc-lib-parser, i.e. has the ghc-lib
        # flag enabled. Also requires a higher bound on ghc-lib-parser-ex.
        # It's here https://github.com/ndmitchell/hlint/pull/1385
        hlint = hself.callCabal2nix "hlint" (self.fetchFromGitHub {
          owner = "ndmitchell";
          repo = "hlint";
          rev = "14d9f2012a24a89a12731dfe577640ad3daa50ff";
          sha256 = "9uNr9xiNPCRPgBNYv86aAyOu/AqqfESfrbri0avIAjI=";
          fetchSubmodules = true;
        }) {};
        ghc-lib-parser = hself.callHackage "ghc-lib-parser" "9.2.4.20220729" {};
        ghc-lib-parser-ex = hself.callHackage "ghc-lib-parser-ex" "9.2.1.1" {};

        # stylish-haskell needs to be built with the ghc-lib flag.
        # As a result of the override here, the 2 new dependencies must be added
        # manually.
        stylish-haskell = (enableCabalFlag (hself.callHackage "stylish-haskell" "0.14.2.0" {}) "ghc-lib").overrideAttrs (attrs: {
          buildInputs = attrs.buildInputs ++ [hself.ghc-lib-parser hself.ghc-lib-parser-ex];
        });

        th-lift-instances = atLeast hself hsuper "th-lift-instances" "0.1.19" {};

        rio =
          if self.stdenv.isDarwin && self.stdenv.isAarch64
          then dontCheck hsuper.rio
          else hsuper.rio;

        cborg = hself.callCabal2nix "cborg" ((self.fetchFromGitHub {
            # need aarch64 compat
            owner = "parsonsmatt";
            repo = "cborg";
            rev = "61c4dcc31a62469753426133483435acfe708483";
            sha256 = "sha256-+yyfXST2EOi1fFa3GS1SPd4PgsqqoxoF2jyUX/r6fJQ=";
          })
          + /cborg) {};

        # Jailbreaking for the template-haskell dependency which looks to have been
        # fixed on Hackage but still causes a problem here.
        string-interpolate = doJailbreak hsuper.string-interpolate;

        # https://github.com/iand675/haikunator/
        # used by payment requests to generate url slugs
        haikunator = hself.callCabal2nix "haikunator" (self.fetchFromGitHub {
          owner = "iand675";
          repo = "haikunator";
          rev = "4fc77eaf0bbac20766b9cd10e71271bd7df67bbc";
          sha256 = "1akyl7vkxmwifa6swdw0h2m7yswxf2136bd6nb0aiby73invmi2b";
          fetchSubmodules = false;
        }) {};

        # Needs a fix for the pretty printer.
        # https://github.com/HaXml/HaXml/pull/8
        HaXml = hself.callCabal2nix "HaXml" (self.fetchFromGitHub {
          owner = "avieth";
          repo = "HaXml";
          rev = "7e3f646fe2af5eb5576d5bcdff56e098d445527c";
          sha256 = "qkJp6fMiE7UxRjcRjWYhomn9GyyDSqzH4lhWbXVoi64=";
          fetchSubmodules = true;
        }) {};

        # https://github.com/yesodweb/authenticate/pull/59
        # https://github.com/MercuryTechnologies/authenticate/tree/ours from 2022-07-29 until upstream is available
        authenticate-oauth = hself.callCabal2nix "authenticate-oauth" ((self.fetchFromGitHub {
            owner = "MercuryTechnologies";
            repo = "authenticate";
            rev = "3aac7c4ae17839f54f7c77c8ed2f73941c4a9851";
            sha256 = "Yy/Djhhqe+MNRVvQY2weAo6bn1+9lsJD6nJGDEU+qoc=";
          })
          + "/authenticate-oauth") {};

        # Has a test that times out after 30 seconds, effectively making the
        # build nondeterministic.
        criterion = dontCheck hsuper.criterion;

        # up-to-date version of http-client, but without a recent mis-feature.
        # https://github.com/snoyberg/http-client/pull/488
        http-client = hself.callCabal2nix "http-client" (self.fetchFromGitHub {
            owner = "avieth";
            repo = "http-client";
            rev = "30c6bbb69fafb4c779351de998753a9990b845fa";
            sha256 = "/9k2q53IMzdTsiHrQoOYkoPVJvHCLwqGA97CK5w9WWk=";
            fetchSubmodules = true;
          }
          + /http-client) {};

        # Our string-variants library
        # https://github.com/MercuryTechnologies/string-variants
        string-variants = hself.callHackage "string-variants" "0.1.0.1" {};
      };

    overlay-tools = hself: hsuper:
      with self.haskell.lib; {
        # aeson, base bounds
        HsYAML-aeson = hself.callHackage "HsYAML-aeson" "0.2.0.1" {};

        # 9.2 support
        apply-refact = hself.callHackage "apply-refact" "0.10.0.0" {};

        # 0.3.2.0 won't build on ghc 9.2
        constraints-extras = hself.callHackage "constraints-extras" "0.3.2.1" {};

        # hashable bound.
        foldl = hself.callHackage "foldl" "1.4.12" {};

        # 9.2 support not on hackage.
        fast-tags = hself.callCabal2nix "fast-tags" (self.fetchFromGitHub {
          owner = "elaforge";
          repo = "fast-tags";
          rev = "72e2f54d82671682530a859a0e9e67703e0d09e4";
          sha256 = "W9Crb5f8ViYcN0jYUxn448RO8lsoi3eDi3wr2pJYI4Q=";
          fetchSubmodules = true;
        }) {};

        # Versions >= 1.1 are intended for 9.2
        # 1.5 needed for apply-refact
        ghc-exactprint = hself.callHackage "ghc-exactprint" "1.5.0" {};

        # Builds with template-haskell-2.18
        dependent-sum-template = hself.callHackage "dependent-sum-template" "0.1.1.1" {};
        # base bound
        some = atLeast hself hsuper "some" "1.0.3" {};
        # time, bytestring bounds
        turtle = hself.callHackage "turtle" "1.5.24" {};

        ghc-check = hself.callHackage "ghc-check" "0.5.0.8" {};

        # Build on 9.2
        # https://github.com/masaeedu/halfsp/pull/3
        # Don't use its default.nix because that brings in a lot of nix dependencies
        # that we don't necessarily want
        halfsp = hself.callCabal2nix "halfsp" (self.fetchFromGitHub {
          owner = "avieth";
          repo = "halfsp";
          rev = "0567015d74273c7eb45d0a88b2dac1359adbb2ef";
          sha256 = "1pDsTG4LLSe+isZA7ypTLg2Gn/sm2fQAqz9syQvo4D4=";
          fetchSubmodules = true;
        }) {};

        # test suite won't even build FIXME
        tasty-discover = dontCheck hsuper.tasty-discover;

        fourmolu = dontCheck (hself.callHackage "fourmolu" "0.7.0.1" {});

        # aeson, base bounds
        lsp-types = hself.callHackage "lsp-types" "1.6.0.0" {};
        # FIXME test fails
        lsp-test = dontCheck (hself.callHackage "lsp-test" "0.14.1.0" {});
        # FIXME its test suite defines Arbitrary J.Value which is now defined in
        # aeson. Easy patch
        lsp = dontCheck (hself.callHackage "lsp" "1.6.0.0" {});

        # Needed for ghcide version, and also aeson 2 bound.
        # Got a permission denied error when opening a file which caused the tests
        # to fail... disabled for now but FIXME
        # Also needed for halfsp; so we can't just rely on the HLS overlay to pick
        # it.
        hie-bios = dontCheck (hself.callHackage "hie-bios" "0.11.0" {});

        retrie = dontCheck (hself.callHackage "retrie" "1.2.0.1" {});
        # Requires old hspec for its test suite.
        floskell = dontCheck (hself.callHackage "floskell" "0.10.6" {});
        ormolu = (ormolu:
          if (self.stdenv.hostPlatform.isDarwin && self.stdenv.hostPlatform.isAarch64)
          then overrideCabal ormolu (drv: {enableSeparateBinOutput = false;})
          else ormolu)
        (hself.callHackage "ormolu" "0.5.0.0" {});

        ghcid =
          if (self.stdenv.hostPlatform.isDarwin && self.stdenv.hostPlatform.isAarch64)
          then overrideCabal hsuper.ghcid (drv: {enableSeparateBinOutput = false;})
          else hsuper.ghcid;

        # template-haskell bound is < 2.17 on 0.8.0
        # hashable bound goes up on 0.9.1
        # Tests disabled because they require validity, which won't build on GHC 9.2
        # at the moment.
        path = dontCheck (atLeast hself hsuper "path" "0.9.1" {});

        # Using fetchGit instead of fetchFromGitHub due to persistent-tags being a private repo.
        persistent-tags = hself.callCabal2nix "persistent-tags" (builtins.fetchGit {
          url = "git@github.com:MercuryTechnologies/persistent-tags.git";
          ref = "main";
          rev = "1a56b9f48da5c1e94d76447b6a243350e8d151cf";
        }) {};

        primitive-extras = hself.callHackage "primitive-extras" "0.10.1.4" {};

        microstache = doJailbreak (hself.callHackage "microstache" "1.0.2" {});

        # Lowest version to work with bytestring >=0.11
        hspec-wai = atLeast hself hsuper "hspec-wai" "0.11.1" {};

        # base bound
        hslogger = hself.callHackage "hslogger" "1.3.1.0" {};

        generics-sop = atLeast hself hsuper "generics-sop" "0.5.1.2" {};

        doctemplates = hself.callHackage "doctemplates" "0.10.0.1" {};

        # Temporary, trying to bypass weird CI failure on macos.
        wai-app-static = doHaddock hsuper.wai-app-static;

        # Tests are non-deterministic
        zip = dontCheck hsuper.zip;
      };

    # bonusPackages is used to add packages to the set of packages we fetch cabal
    # hashes for. It's used when some other overlay than the ones in this file
    # needs to have some package from callHackage.
    #
    # NOTE: you can probably cause yourself baffling issues if you include
    # something here that already exists in the other overlays.
    bonusPackages = hself: hsuper: {
      implicit-hie-cradle = hself.callHackage "implicit-hie-cradle" "0.5.0.0" {};
    };

    # some-cabal-hashes is a hack to fetch exactly the cabal hashes we care about
    # from all-cabal-hashes.
    some-cabal-hashes = import ../some-cabal-hashes.nix {
      overlays = [
        overlay-ghc924
        overlay-tools
        bonusPackages
      ];
      all-cabal-hashes = inputs.hackage-index;
      # just any ghc version. Used for providing a fake "super" to the overlay so
      # that overrides will be able to see things in super.
      stubPackageSet = super.haskell.packages.ghc924;
      inherit self super;
    };
  in {
    haskell =
      super.haskell
      // {
        packages =
          super.haskell.packages
          // {
            ghc924 = super.haskell.packages.ghc924.override (prev: {
              overrides =
                super.lib.foldl
                composeNamedOverlays
                (prev.overrides or (_: _: {}))
                [
                  # replaces hackage2nix with one that is compatible with
                  # some-cabal-hashes
                  {
                    overlay = some-cabal-hashes.overlay;
                    name = "some-cabal-hashes-overlay";
                  }
                  {
                    overlay = overlay-cabal;
                    name = "cabal";
                  }
                  # Haskell package set for the mwb project.
                  {
                    overlay = overlay-ghc924;
                    name = "packages";
                  }
                  # Haskell package set to support extra Haskell tools like IDEs,
                  # linters, etc.
                  {
                    overlay = overlay-tools;
                    name = "tools";
                  }
                ];
            });
          };
      };
  }
